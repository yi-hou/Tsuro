#!/usr/bin/env python3
import sys
import ast
sys.path.insert(0, '../Admin')
from observer import Observer

sys.path.insert(0, '../Common')
from board import Board
from tiles import Tile
from avatar import Avatar
from rules import Rule

rule = Rule()
board = Board([], [])
avatars = {}

def construct_board(initial_placements):
    global rule, board, avatars
    for placement in initial_placements:
        color = placement[0][0]
        idx = placement[0][1]
        rotation = placement[0][2]
        port = placement[0][5]
        pos = (placement[0][3],placement[0][4])

        avatar = Avatar(color, (pos,port))
        tile = Tile(idx, pos)
        tile.rotate(rotation)
        t1 = Tile(placement[1], pos)
        t2 = Tile(placement[2], pos)
        t3 = Tile(placement[3], pos)
        if rule.check_initial_placement(board, avatar, tile, [t1,t2,t3]):
            board.initial_placement(tile,avatar)
            avatars[color] = avatar

    return board

def move(intermediate_placements):
    global rule, board
    for placement in intermediate_placements:
        color = placement[0][0]
        idx = placement[0][1]
        rotation = placement[0][2]
        pos = (placement[0][3],placement[0][4])

        tile = Tile(idx, pos)
        tile.rotate(rotation)
        t1 = Tile(placement[1], pos)
        t2 = Tile(placement[2], pos)

        if rule.check_placement(board, avatars[color], tile, [t1,t2]):
            board.add_tile(tile,avatars[color])

    obs = Observer(board)
    obs.show_image()



# take in the STDIN as the input and convert it to list
def take_input():
    intermediate_placements = []
    initial_placements = []

    for line in sys.stdin.readlines():
        if line == '':
            break
        line = line[:-1]
        line.encode(encoding='UTF-8')
        line = ast.literal_eval(line)
        if len(line) == 4:
            initial_placements.append(line)
        else:
            intermediate_placements.append(line)
    return intermediate_placements,initial_placements




if __name__ == '__main__':
    intermediate_placements,initial_placements = take_input()
    construct_board(initial_placements)
    move(intermediate_placements)





